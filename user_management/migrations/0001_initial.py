# Generated by Django 5.0.1 on 2024-01-10 20:43

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import user_management.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('elections', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('username', models.CharField(max_length=255, unique=True, verbose_name='Nombre de Usuario')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, validators=[django.core.validators.MinValueValidator(django.utils.timezone.now)])),
                ('exp_date', models.DateTimeField(default=django.utils.timezone.now, validators=[django.core.validators.MinValueValidator(django.utils.timezone.now)])),
                ('is_staff', models.BooleanField(default=False, help_text='Indica si el usuario pertenece a la mesa electoral', verbose_name='Es de la mesa electoral?')),
                ('is_superuser', models.BooleanField(default=False, help_text='Indica si el usuario tiene power', verbose_name='Es super usuario?')),
                ('ci', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='elections.person')),
                ('election_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='elections.election')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'custom_user',
            },
            managers=[
                ('objects', user_management.models.UserManager()),
            ],
        ),
    ]
